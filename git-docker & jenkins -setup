1. Server creation.
   * create 3-servers, t2.medium (1-master, 2-slave servers).

2. Do all servers.
   * install docker.
     yum install docker -y
   * docker swarm init [connect all servers with token
     docker node ls             // show all actively connections.

3. give permissions [Do master server].
   chmod 777 /var/run/docker.sock           //giving permissions for docker.sock 
   systemctl daemon-reload
   systemctl restart docker.service

3. Do master server.
   * install jenkins.

        pipeline {
    agent any
    
    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/MASTHAN55/dockermsproject.git'
            }
        }
        stage('build') {
            steps {
                sh 'docker build -t $image .'             ---> this project is parameterised ---> choice parameter(name=image, choice=movies:v1, train:v1).
            }
        }
        stage('tag') {
            steps {
                sh 'docker tag $image $repo'             ---> this project is parameterised ---> choice parameter(name=repo, choice=masthan733/moviesrepo, 
                                                               masthan733/trainrepo, masthan733/dthrepo).
            }
        }
        stage('push') {
            steps {
                sh 'docker login -u masthan733 -p $password'    ---> manage jenkins ---> system ---> Global properties ---> Environment variables(name=password, value=masthan641@vali) 
                sh 'docker push $repo'
            }
        }
        stage('deploy') {
            steps {
                sh 'docker stack deploy -c docker-compose.yml hello'
            }
        }
    }
}

docker  stack ls
docker stack ps movies
docker stack rm paytm
docker service ls
docker stack deploy --compose-file docker-compose.yml stack_name



     DOCKER FILE	: To create image by automation.
     DOCKER COMPOSE	: To create multiple containers on single server.
     DOCKER SWARM	: To create multiple containers oMultiple servers.
     DOCKE STACK	: Docker swarm + Docker compose


4. WRITE COMPOSE FILE AND PUSH TO GITHUB

version: '3'
services:
  devops:
    image: rahamshaik/devopsreponit:latest
    ports:
      - "80:80"
    volumes:
      - "devopsvol"
    deploy:
      replicas: 3

  aws:
    image: rahamshaik/awsreponit:latest
    ports:
      - "81:80"
    volumes:
      - "awsvol"
    deploy:
      replicas: 3

  datascience:
    image: rahamshaik/datasciencereponit:latest
    ports:
      - "82:80"
    volumes:
      - "datasciencevol"
    deploy:
      replicas: 3

  azure:
    image: rahamshaik/azurereponit:latest
    ports:
      - "83:80"
    volumes:
      - "azurevol"
    deploy:
      replicas: 3


























